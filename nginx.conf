user  root;
worker_processes  50;

#error_log  /dev/stderr;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  debug;

#pid        logs/nginx.pid;
worker_rlimit_nofile 204800;


events {
    worker_connections  204800;
  use epoll;
}

env ACCESS_KEY;
env SECRET_KEY;
env ENDPOINT;
env HOSTNAME;

http {
    include       mime.types;
    default_type  application/octet-stream;
	resolver 114.114.114.114;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_code_cache on;
    server {
      listen 8083;
      location / {
        root html/;

        rewrite_by_lua_block {
          ngx.req.set_header("Authorization", nil)
          ngx.req.set_header("x-amz-date", nil)
          ngx.req.set_header("x-amz-content-sha256", nil)
          ngx.req.set_header("range", "0-")
        }

        #internal;
        image_filter resize $arg_w $arg_h;
        image_filter_buffer 100M;
        #image_filter_jpeg_quality 99;

        add_header Content-Type  image/$arg_type;
        proxy_pass $http_ProxyUrl;

      }
    }

    server {
    listen 8082;
    server_name 123-thumbnail.123pan.com;


    location / {
      root html/;
      set $w $arg_w;
      set $h $arg_h;
      set $type $arg_type;

      set_by_lua_block $proxy_url {
        local path = {}
        for item in string.gmatch(ngx.var.document_uri, "[%w-]+") do
            table.insert(path, item)
        end

        local bucket, key = path[1], path[2] .. "/" .. path[3] .. "/" .. string.match(path[4], "%w+")
        local exp = os.time()+10000

        local a = ngx.hmac_sha1(os.getenv("SECRET_KEY"), "GET\n\n\n" .. exp .. "\n" .. "/" .. bucket .. "/" .. key)


        local urlEncode = function(s)
            s = string.gsub(s,"([^%w%.%- ])",function(c) return string.format("%%%02X",string.byte(c)) end)
            return string.gsub(s," ","+")
        end

        return os.getenv("ENDPOINT") .. bucket .. "/" .. key .. "?AWSAccessKeyId=" .. os.getenv("ACCESS_KEY") .. "&Expires=" .. exp .. "&Signature=" .. urlEncode(ngx.encode_base64(a))

        --ngx.log(ngx.ERR, proxy)
        --ngx.exit(ngx.HTTP_BAD_REQUEST)

      }

   

      proxy_set_header ProxyUrl $proxy_url;

      if ($arg_type ~* (jpg|png|gif|jpeg)) {
		header_filter_by_lua_block {
			if ngx.status ~= 304 then
				ngx.status=206
				ngx.header.content_range = "bytes 0-"..(tonumber(ngx.header.content_length)-1).."/"..ngx.header.content_length
			end
		}
        
        proxy_pass http://127.0.0.1:8083?w=$w&h=$h&type=$type;
      }



      if ($arg_type = video) {
        set $my_request_filename $request_filename;
        set $my_realpath_root $realpath_root;


        rewrite_by_lua_block {
          ngx.exec("/video")
        }
      }



    }


    location ~* (.*)\.png$ {
      internal;
      root /;

      default_type image/png;
    }



    location = /video {
      internal;

      set_by_lua $my_file "
        ngx.log(ngx.ERR, ngx.var.my_request_filename)
        local path = {}
        for item in string.gmatch(ngx.var.my_request_filename, '[%w-_]+') do
          table.insert(path, item)
        end

        local len = #path
        os.execute('mkdir -p ' .. ngx.var.my_realpath_root .. '/' .. path[len-3])

        --return ngx.var.my_realpath_root .. '/' .. path[len-3] .. '/' .. path[len] .. '_' .. ngx.var.w .. '_' .. ngx.var.h .. '.png'
        return ngx.var.my_realpath_root .. '/' .. path[len-3] .. '/' .. path[len] .. '.png'
      ";

      if (!-f $my_file) {
        content_by_lua_block {
            os.execute("ffmpeg -i \"".. ngx.var.proxy_url .. "\" -ss 5 -vframes 1 -vf scale=" .. ngx.var.w .. ":" .. ngx.var.h .. " " .. ngx.var.my_file)
            ngx.exec(ngx.var.my_file)
        }
      }

      if (-f $my_file) {
        content_by_lua_block {
          ngx.exec(ngx.var.my_file)
        }
      }

    }

  }



    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
